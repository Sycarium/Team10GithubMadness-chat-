import openai

# Set OpenAI API keys
openai.api_key = "api_key1"
openai.api_key2 = "api_key2"
openai.api_key3 = "api_key3"
openai.api_key4 = "api_key4"
openai.api_key5 = "api_key5"
openai.api_key6 = "api_key6"

# Define the EngineManager class to manage different engines for each chatbot
class EngineManager:
    def __init__(self):
        self.engines = {
            "chatbot1": "TheAverageUser",
            "chatbot2": "Telepath",
            "chatbot3": "TheFemChar",
            "chatbot4": "TheScientist",
            "chatbot5": "TheWeirdo",
            "chatbot6": "TheUltimateUser",
        }
        
    def get_engine(self, chatbot_id):
        return self.engines.get(chatbot_id, "TheAverageUser")

# Define the Chatbot class
class Chatbot:
    def __init__(self, id, name, api_key, engine):
        self.id = id
        self.name = name
        self.conversation_history = ""
        self.active = False
        self.api_key = api_key
        self.engine = engine
        
    def generate_response(self, user_input):
        # Get the conversation history for this chatbot
        history = self.conversation_history

        # Concatenate the user input and conversation history into a prompt
        prompt = history + user_input

        # Generate a response from the OpenAI API using the appropriate engine for this chatbot
        completions = openai.Completion.create(
            engine=self.engine,
            prompt=prompt,
            max_tokens=1024,
            n=1,
            stop=None,
            temperature=0.7,
            api_key=self.api_key,
        )

        # Extract the response from the API output
        message = completions.choices[0].text.strip()

        # Store the conversation history for this chatbot
        self.conversation_history = prompt + message

        return message

# Create six instances of Chatbot with separate OpenAI API keys and engines
engine_manager = EngineManager()
chatbots = [
    Chatbot("chatbot1", "TheAverageUser", openai.api_key, engine_manager.get_engine("chatbot1")),
    Chatbot("chatbot2", "Telepath", openai.api_key2, engine_manager.get_engine("chatbot2")),
    Chatbot("chatbot3", "TheFemChar", openai.api_key3, engine_manager.get_engine("chatbot3")),
    Chatbot("chatbot4", "TheScientist", openai.api_key4, engine_manager.get_engine("chatbot4")),
    Chatbot("chatbot5", "TheWeirdo", openai.api_key5, engine_manager.get_engine("chatbot5")),
    Chatbot("chatbot6", "TheUltimateUser", openai.api_key6, engine_manager.get_engine("chatbot6")),
]

# Set the first chatbot to be active by default
chatbots[0].active = True

# Example usage when user clicks on a chatbot to use
def activate_chatbot(chatbot_id):
    # Set all chatbots to inactive
    for chatbot in chatbots:
        chatbot.active = False
        
    # Set the clicked chatbot to active
    active_chatbot = next(chatbot for chatbot in chatbots if chatbot.id == chatbot_id)
    active_chatbot.active = True

    # Example usage when user sends a message to the active chatbot
def send_message(user_input):
    # Get the active chatbot
    active_chatbot = next(chatbot for chatbot in chatbots if chatbot.active)
    
    # Generate a response from the active chatbot
    response = active_chatbot.generate_response(user_input)
    
    return response



# Uncomment this code and replace the API keys with your own
# if you want to use the openai_secret_manager to retrieve your API keys which you 100% do.
"""
import openai_secret_manager

# Set up the OpenAI API clients for each chatbot
for chatbot in chatbots:
    chatbot.api_key = openai_secret_manager.get_secret("openai")["api_key"]
"""